/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.nowriter.gradle.props;

import org.gradle.testkit.runner.BuildResult;
import org.gradle.testkit.runner.GradleRunner;
import org.gradle.testkit.runner.internal.DefaultGradleRunner;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.io.IOException;

/**
 * A simple functional test for the 'com.nowriter.gradle.props' plugin.
 */
class GradlePropsPluginFunctionalTest extends BaseGradlePropsPluginFunctionTest {

    /**
     * Default Gradle version to test with.
     */
    private static final String DEFAULT_GRADLE_VERSION = "7.4.2";

    /**
     * Test fixture - creates a default settings file.
     */
    @BeforeEach
    public void setUp() throws IOException {
        writeSettingsFile("");
    }

    /**
     * Test that a custom properties file is loaded and the project contains a custom-defined property.
     */
    @Test
    @DisplayName("Test should load sample properties file")
    void shouldLoadSamplePropertiesFile() throws IOException {
        final String TASK_NAME = ":testPropValueTask";
        writeString(getProjectFile("sample.properties"), "sampleProp=sampleData");
        writeBuildScript(
                "plugins {\n" +
                        "    id(\"com.nowriter.gradle.props\")\n" +
                        "}\n" +
                        "\n" +
                        "propertySources {\n" +
                        "    required(\"sample.properties\")\n" +
                        "    optional(\"non-existing-properties-file\")\n" +
                        "}\n" +
                        "\n" +
                        "val sampleProp: String by project.extra\n" +
                        "System.out.println(\"sampleProp = ${sampleProp}\")\n");

        BuildResult result = createGradleRunner()
                .withArguments(TASK_NAME)
                .withArguments("--stacktrace")
                .build();

        Assertions.assertTrue(result.getOutput().contains("sampleProp = sampleData"));

        result = createGradleRunner("6.9.2")
                .withArguments(TASK_NAME)
                .withArguments("--stacktrace")
                .build();

        Assertions.assertTrue(result.getOutput().contains("sampleProp = sampleData"));
    }

    /**
     * Test that a build script will fail on missing required properties file.
     */
    @Test
    @DisplayName("Test should fail on missing required properties file")
    void shouldFailOnMissingRequiredPropertiesFile() throws IOException {
        writeBuildScript(
                "plugins {\n" +
                        "    id(\"com.nowriter.gradle.props\")\n" +
                        "}\n" +
                        "\n" +
                        "propertySources {\n" +
                        "    required(\"sample.properties\")\n" +
                        "}\n");

        BuildResult result = createGradleRunner().buildAndFail();

        Assertions.assertTrue(result.getOutput().contains("Missing mandatory properties file"));
    }

    /**
     * @return Creates a new Gradle runner with {@link #DEFAULT_GRADLE_VERSION default Gradle version}.
     */
    private GradleRunner createGradleRunner() {
        return createGradleRunner(DEFAULT_GRADLE_VERSION);
    }

    /**
     * Creates a Gradle test-kit runner for the given Gradle version.
     *
     * @param gradleVersion Gradle version.
     * @return New runner.
     */
    private GradleRunner createGradleRunner(String gradleVersion) {
        GradleRunner runner = new DefaultGradleRunner();

        // Uncomment the following line to enable plugin debugging.
        // runner.withJvmArguments("-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005")

        return runner
                .withGradleVersion(gradleVersion)
                .forwardOutput()
                .withPluginClasspath()
                .withProjectDir(projectDir.toFile())
                .withArguments("--stacktrace");
    }


}
